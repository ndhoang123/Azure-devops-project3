# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
name: $(Date:yyyyMMdd)$(Rev:.r)
trigger:
- main

pool: UdaProject3

variables:
  python.version: '3.7.6'
  # ToDo: Replace the service connection name as used in the DevOps project settings
  azureServiceConnectionId: 'UdacityProject3'
  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)
  # Environment name
  environmentName: 'UdaProject3'
  group: 'ssh-configuration'
  buildConfiguration: 'Release'

stages:
    #--------------------------------------------#  
    # BUILD STAGE
    #--------------------------------------------#    
  - stage: Infrastructure
    displayName: Using Terraform
    jobs:
    - job: BuildInfrastructure
      steps:
      # --------------------------------------------#  
      # Use Terraform to create the Infrastructure      
      # Install Terraform on the pipeline agent 
      - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
        displayName: 'Terrafom installation'
        inputs:
          terraformVersion: '1.2.9'
          
      # Run Terraform Init on the pipeline agent 
      - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
        displayName: 'Terrafom init'
        inputs:
          provider: 'azurerm'
          command: 'init'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
          backendServiceArm: '$(azureServiceConnectionId)'
          backendAzureRmResourceGroupName: 'Udacity-rg'
          backendAzureRmStorageAccountName: 'tfstate211612707'
          backendAzureRmContainerName: 'tfstate'
          backendAzureRmKey: 'test.terraform.tfstate'
      
      - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
        displayName: Terraform validate
        inputs:
          provider: 'azurerm'
          command: 'validate'
      
      # OPTIONAL - This step is needed only if your Terraform VM uses an SSH key pair for login and you want your pipeline agent to connect to it. 
      # Generate an SSH key pair in your local/AZ Cloud shell. Use the public key in the Terraform VM module. 
      # Install public key and private key file to the pipeline agent, using the task below. 
      # ToDo: Change the inputs value below
      - task: InstallSSHKey@0
        inputs:
          knownHostsEntry: '$(knownHostEntry)' # variable value
          # sshPublicKey: '$(sshPublicKey)'      # variable value
          sshKeySecureFile: 'id_rsa' # Use secure file feature in the pipeline library UI to save the "id_rsa" file, as mentioned here: https://learn.microsoft.com/en-us/azure/devops/pipelines/library/secure-files?view=azure-devops#add-a-secure-file
          
      - task: DownloadSecureFile@1
        name: 'udacity_public_key'
        displayName: Terraform tfvar file
        inputs:
          secureFile: 'terraform.tfvars'
      
      - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
        displayName: Terraform plan
        inputs:
          provider: 'azurerm'
          command: 'plan'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
          environmentServiceNameAzureRM: '$(azureServiceConnectionId)'
          
      # Run Terraform Apply
      # - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      #   displayName: Terraform apply
      #   inputs:
      #     provider: 'azurerm'
      #     command: 'apply'
      #     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
      #     environmentServiceNameAzureRM: '$(azureServiceConnectionId)'
      
      # ToDo: Change the workingDirectory path, as applicable to you
      # Destroy the resources in Azure by running a separate pipeline. 
      # - task: TerraformTaskV3@3
      #   displayName: Terraform destroy
      #   inputs:
      #     provider: 'azurerm'
      #     command: 'destroy'
      #     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
      #     environmentServiceNameAzureRM: '$(azureServiceConnectionId)'
  #--------------------------------------------#
  - stage: Build
    jobs:
    - job: Build
      pool:
          name: UdaProject3
      steps:
      - task: ArchiveFiles@2
        displayName: "Archive FakeRestAPI"
        inputs:
            rootFolderOrFile: "$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi"
            includeRootFolder: false
            archiveType: zip
            archiveFile: "$(Build.ArtifactStagingDirectory)/fakerestapi.zip"

      - publish: "$(Build.ArtifactStagingDirectory)/fakerestapi.zip"
        displayName: Publish FakeRestAPI Archive
        artifact: fakerestapi

      - task: ArchiveFiles@2
        displayName: Archive Selenium
        inputs:
          rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
          includeRootFolder: false
          archiveType: 'zip'
          archiveFile: '$(Build.BuildId)-selenium.zip'
          replaceExistingArchive: true
        
      - task: PublishPipelineArtifact@1
        displayName: Upload Selenium
        inputs:
         targetPath: $(Build.BuildId)-selenium.zip
         artifact: drop-selenium

  # #--------------------------------------------#  
  # # DEPLOYMENT STAGE
  # #--------------------------------------------#    
  - stage: Deploy
    dependsOn:
    - Build
    jobs:
    #--------------------------------------------#  
    # Deploy FakeRestAPI Web App
    # ToDo: Provide <environment name> you created in your DevOps project
    - deployment: FakeRestAPI
      pool: UdaProject3
      environment: $(environmentName)   # ToDo
      strategy:
        runOnce:
          deploy:
            steps:
            - task: AzureWebApp@1
              displayName: 'Deploy Azure Web App'
              inputs:
                azureSubscription: 'UdacityProject3'     # ToDo
                appName: 'udacity-project3-AppService'               # ToDo
                appType: webApp
                package: $(Pipeline.Workspace)/fakerestapi/fakerestapi.zip

#--------------------------------------------#
  - stage: Test 
    displayName: Test
    jobs:
    - job: TestPostman
      pool: UdaProject3
      steps:
      # Postman - Install Newman    
      # ToDo: Update the command and verify the working directory
      - task: NodeTool@0
        inputs:
          versionSource: 'spec'
          versionSpec: '16.x'
      - task: CmdLine@2
        displayName: Install Newman
        inputs:
          script: 'npm install newman -g'
          workingDirectory: '$(System.DefaultWorkingDirectory)'
      # Postman Data Validation Test Suite    
      # ToDo: Verify the working directory
      - task: CmdLine@2
        displayName: Run Data Validation Tests
        continueOnError: true
        inputs:
          script: 'newman run Validation.postman_collection.json -e Uda-env.postman_environment.json --reporters cli,junit --reporter-junit-export TEST-DataValidation.xml'
          workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
      # Postman Regression Test Suite    
      # ToDo: Verify the working directory
      - task: CmdLine@2
        displayName: Run Regression Tests
        continueOnError: true
        inputs:
          script: 'newman run Regression.postman_collection.json -e Uda-env.postman_environment.json --reporters cli,junit --reporter-junit-export TEST-Regression.xml'
          workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
      # Postman - Publish Results 
      # ToDo: Complete the task as explained here: https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/test/publish-test-results?view=azure-devops&tabs=trx%2Cyaml#yaml-snippet
      - task: PublishTestResults@2
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: '**/TEST-*.xml'
          searchFolder: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'      # ToDo
          mergeTestResults: true
          testRunTitle: 'ReportTestWithPotman'      # ToDo   

    #   #--------------------------------------------#  
    #   # JMeter (Performance) Test Suite - Archive
    #   # ToDo: Complete the ArchiveFiles@2 task and publish step 
    - job: PerformmanceTest
      dependsOn: TestPostman
      pool: UdaProject3
      steps:    
      - task: Bash@3
        displayName: 'Install JMeter'
        inputs:
          targetType: 'inline'
          script: |
            sudo apt-get install openjdk-11-jre-headless -y
            sudo apt-get update
            java -version
            wget https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.6.2.tgz
            
      - task: ExtractFiles@1
        inputs:
          archiveFilePatterns: '**/*.tgz'
          destinationFolder: '$(System.DefaultWorkingDirectory)'
          cleanDestinationFolder: false
          overwriteExistingFiles: true

      - task: Bash@3
        displayName: 'Install JMeter part 2'
        inputs:
          targetType: 'inline'
          script: |
            apache-jmeter-5.6.2/bin/jmeter --version
            mkdir -p log/jmeter
            pwd          
            ls -la
            ls '$(System.DefaultWorkingDirectory)'
      - task: Bash@3
        displayName: 'Stress Test jmeter'
        inputs:
          targetType: 'inline'
          script: |
            '$(System.DefaultWorkingDirectory)'/apache-jmeter-5.6.2/bin/jmeter -n -t '$(System.DefaultWorkingDirectory)'/automatedtesting/jmeter/Stress.jmx -l '$(System.DefaultWorkingDirectory)'/jmeterOutput/Stress-test.csv -e -f -o '$(System.DefaultWorkingDirectory)'/jmeterOutput/stress-test-html-report -j jmeterOutput/jmeter-stress-test.log
            cat jmeterOutput/jmeter-stress-test.log
            ls '$(System.DefaultWorkingDirectory)'
            ls '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter'
      - task: Bash@3
        displayName: 'Endurance Test jmeter'
        inputs:
          targetType: 'inline'
          script: |
            '$(System.DefaultWorkingDirectory)'/apache-jmeter-5.6.2/bin/jmeter -n -t '$(System.DefaultWorkingDirectory)'/automatedtesting/jmeter/Endurance.jmx -l '$(System.DefaultWorkingDirectory)'/jmeterOutput/test-result.csv -e -f -o '$(System.DefaultWorkingDirectory)'/jmeterOutput/endurance-test-html-report -j jmeterOutput/endurance-stress-test.log
            cat jmeterOutput/endurance-stress-test.log
      - task: ArchiveFiles@2
        displayName: 'Archive Stress Test result'
        inputs:
          rootFolderOrFile: '$(System.DefaultWorkingDirectory)/jmeterOutput/endurance-test-html-report'
          includeRootFolder: false
          archiveType: 'zip'
          archiveFile: '$(System.DefaultWorkingDirectory)/jmeterOutput/stress-test-html-report.zip'
      - task: ArchiveFiles@2
        displayName: 'Archive Endurance Test result'
        inputs:
          rootFolderOrFile: '$(System.DefaultWorkingDirectory)/jmeterOutput/endurance-test-html-report'
          includeRootFolder: false
          archiveType: 'zip'
          archiveFile: '$(System.DefaultWorkingDirectory)/jmeterOutput/endurance-test-html-report.zip'
      # JMeter Test Suite - Publish 
      - task: PublishPipelineArtifact@1
        displayName: 'Upload jmeter log package'
        inputs:
          targetPath: '$(System.DefaultWorkingDirectory)/jmeterOutput'
          artifact: 'drop-jmeter'

    - deployment: SeleniumTest
      displayName: 'UI Test'
      dependsOn: PerformmanceTest
      environment: 
        name: 'UdaProject3'
        resourceType: VirtualMachine
      strategy:
        runOnce:
          deploy:
            steps:
              - task: Bash@3
                displayName: 'Bash Test'
                inputs:
                  targetType: 'inline'
                  script: |
                    #!/bin/bash
                    sudo apt-get upgrade -y
                    sudo apt-get install python3-pip -y
                    sudo apt-get install unzip -y
                    sudo apt-get install -y chromium-browser
                    sudo apt install chromium-chromedriver
                    pip3 install selenium

                    # download chrome driver
                    wget https://chromedriver.storage.googleapis.com/114.0.5735.90/chromedriver_linux64.zip
                    # install chrome driver
                    unzip chromedriver_linux64.zip
                    sudo mv chromedriver /usr/bin/chromedriver
                    sudo chown root:root /usr/bin/chromedriver
                    sudo chmod +x /usr/bin/chromedriver
                    chromium-browser -version
                    chromedriver --version
                  
                    cd $(Pipeline.Workspace)/drop-selenium
                    unzip -o $(Build.BuildId)-selenium.zip
                    sudo mkdir -p /var/log/selenium
                    sudo chmod 664 /var/log/selenium
                    python3 login.py > ui-logs.log
                    python3 login.py
                    sudo mv ui-logs.log /var/log/selenium
                    cd $(System.DefaultWorkingDirectory)
                    mkdir -p log/selenium
                    sudo cp /var/log/selenium/ui-logs.log log/selenium
              - task: PublishPipelineArtifact@1
                displayName: 'Upload jmeter log package'
                inputs:
                  targetPath: '$(System.DefaultWorkingDirectory)/log/selenium/ui-logs.log'
                  artifact: 'drop-selenium-logs'