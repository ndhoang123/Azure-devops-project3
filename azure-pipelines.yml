# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
name: $(Date:yyyyMMdd)$(Rev:.r)
trigger:
- main

pool: Default

variables:
  python.version: '3.7.6'
  # ToDo: Replace the service connection name as used in the DevOps project settings
  azureServiceConnectionId: 'UdacityProject3'
  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)
  # Environment name
  environmentName: 'test'
  group: 'ssh-configuration'

stages:
    #--------------------------------------------#  
    # BUILD STAGE
    #--------------------------------------------#    
  - stage: Infrastructure
    displayName: Using Terraform
    jobs:
    - job: BuildInfrastructure
      steps:
      # --------------------------------------------#  
      # Use Terraform to create the Infrastructure      
      # Install Terraform on the pipeline agent 
      - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
        displayName: 'Terrafom installation'
        inputs:
          terraformVersion: '1.2.9'
          
      # Run Terraform Init on the pipeline agent 
      - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
        displayName: 'Terrafom init'
        inputs:
          provider: 'azurerm'
          command: 'init'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
          backendServiceArm: '$(azureServiceConnectionId)'
          backendAzureRmResourceGroupName: 'Udacity-rg'
          backendAzureRmStorageAccountName: 'tfstate252133063'
          backendAzureRmContainerName: 'tfstate'
          backendAzureRmKey: 'test.terraform.tfstate'
      
      - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
        displayName: Terraform validate
        inputs:
          provider: 'azurerm'
          command: 'validate'
      
      # OPTIONAL - This step is needed only if your Terraform VM uses an SSH key pair for login and you want your pipeline agent to connect to it. 
      # Generate an SSH key pair in your local/AZ Cloud shell. Use the public key in the Terraform VM module. 
      # Install public key and private key file to the pipeline agent, using the task below. 
      # ToDo: Change the inputs value below
      - task: InstallSSHKey@0
        inputs:
          knownHostsEntry: '$(knownHostEntry)' # variable value
          # sshPublicKey: '$(sshPublicKey)'      # variable value
          sshKeySecureFile: 'id_rsa' # Use secure file feature in the pipeline library UI to save the "id_rsa" file, as mentioned here: https://learn.microsoft.com/en-us/azure/devops/pipelines/library/secure-files?view=azure-devops#add-a-secure-file
          
      - task: DownloadSecureFile@1
        name: 'udacity_public_key'
        displayName: Terraform tfvar file
        inputs:
          secureFile: 'terraform.tfvars'
      
          
      # Run Terraform Apply
      # - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      #   displayName: Terraform apply
      #   inputs:
      #     provider: 'azurerm'
      #     command: 'apply'
      #     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
      #     environmentServiceNameAzureRM: '$(azureServiceConnectionId)'
      
      # ToDo: Change the workingDirectory path, as applicable to you
      # Destroy the resources in Azure by running a separate pipeline. 
      # - task: TerraformTaskV3@3
      #   displayName: Terraform destroy
      #   inputs:
      #     provider: 'azurerm'
      #     command: 'destroy'
      #     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
      #     environmentServiceNameAzureRM: '$(azureServiceConnectionId)'
  #--------------------------------------------#
  - stage: Build
    jobs:
    - job: Build
      pool:
          name: Default
      steps:
      - script: |
          wget -q https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/packages-microsoft-prod.deb
          sudo dpkg -i packages-microsoft-prod.deb
          sudo a  pt-get update
          sudo apt-get install -y dotnet-sdk-6.0
        displayName: 'Install .NET SDK 6.0'
      - script: dotnet --version 
        displayName: 'Verify the installation'
      - script: |
          ls
          cd fakerestapi/FakeRESTApi.Web
          dotnet build --configuration release
          ls /bin/release/net6.0
          echo "Build done"
        displayName: 'Build .NET project'
  #     - task: ArchiveFiles@2
  #       displayName: Archive FakeRestAPI
  #       inputs:
  #         rootFolderOrFile: '$(System.DefaultWorkingDirectory)/fakerestapi/FakeRESTApi.Web/bin/release/net6.0'
  #         includeRootFolder: false
  #         archiveType: 'zip'
  #         archiveFile: '$(Build.BuildId)-fakerestapi.zip'
  #     - task: PublishPipelineArtifact@1
  #       displayName: Upload package
  #       inputs:   
  #         targetPath: $(Build.BuildId)-fakerestapi.zip
  #         artifact: drop-fakerestapi

  #     - task: ArchiveFiles@2
  #       displayName: Archive Selenium
  #       inputs:
  #         rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
  #         includeRootFolder: false
  #         archiveType: 'zip'
  #         archiveFile: '$(Build.BuildId)-selenium.zip'
  #         replaceExistingArchive: true
        
  #     - task: PublishPipelineArtifact@1
  #       displayName: Upload Selenium
  #       inputs:
  #        targetPath: $(Build.BuildId)-selenium.zip
  #        artifact: drop-selenium

  # #--------------------------------------------#  
  # # DEPLOYMENT STAGE
  # #--------------------------------------------#    
  # - stage: Deploy
  #   jobs:
  #   #--------------------------------------------#  
  #   # Deploy FakeRestAPI Web App
  #   # ToDo: Provide <environment name> you created in your DevOps project
  #   - deployment: FakeRestAPI
  #     pool: Default
  #     environment: 'myLinux'   # ToDo
  #     strategy:
  #       runOnce:
  #         deploy:
  #           steps:
  #           - task: AzureWebApp@1
  #             displayName: 'Deploy Azure Web App'
  #             inputs:
  #               azureSubscription: 'UdacityProject3'     # ToDo
  #               appName: 'Uda-project3-windows'               # ToDo
  #               appType: webApp
  #               package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip
  #               deploymentMethod: auto
  #               # #--------------------------------------------#    
  #           # # Run JMeter test suite against the App Service
  #           # - task: CmdLine@2
  #           #   inputs:
  #           #     script: |
  #           #       wget "https://apache.mirrors.lucidnetworks.net//jmeter/binaries/apache-jmeter-5.2.1.tgz"
  #           #       tar -xf apache-jmeter-5.2.1.tgz
  #           #       unzip -o $(Build.BuildId)-perftests.zip
  #           #       ./apache-jmeter-5.2.1/bin/jmeter -n -t PerformanceTestSuite.jmx -j jmeter.log -f
  #           #       cat jmeter.log                                                                           # ToDo: Write your commands
  #           #     workingDirectory: $(Pipeline.Workspace)/drop-api            # ToDo: Use the artifact name from the task above
  